<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Nightclub Minigame</title>
  <style>
    body { margin: 0; overflow: hidden; }
    canvas { display: block; }
    .chat-bubble { background: rgba(255, 255, 255, 0.8); padding: 5px 10px; border-radius: 10px; font-family: sans-serif; pointer-events: none; }
    #blocker { position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.7); display: flex; align-items: center; justify-content: center; z-index: 100; }
    #instructions { font-size: 24px; color: #fff; cursor: pointer; user-select: none; }
  </style>
</head>
<body>
  <div id="blocker"><div id="instructions">Click to Play</div></div>
  <script type="module">
    import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.150.0/build/three.module.js';
    import { PointerLockControls } from 'https://cdn.jsdelivr.net/npm/three@0.150.0/examples/jsm/controls/PointerLockControls.js';
    import { CSS2DRenderer, CSS2DObject } from 'https://cdn.jsdelivr.net/npm/three@0.150.0/examples/jsm/renderers/CSS2DRenderer.js';

    // Scene, camera, renderers
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const labelRenderer = new CSS2DRenderer();
    labelRenderer.setSize(window.innerWidth, window.innerHeight);
    labelRenderer.domElement.style.position = 'absolute';
    labelRenderer.domElement.style.top = '0';
    labelRenderer.domElement.style.pointerEvents = 'none';
    document.body.appendChild(labelRenderer.domElement);

    // PointerLock controls
    const controls = new PointerLockControls(camera, renderer.domElement);
    const blocker = document.getElementById('blocker');
    const instructions = document.getElementById('instructions');
    instructions.addEventListener('click', () => controls.lock());
    controls.addEventListener('lock', () => { blocker.style.display = 'none'; console.log('Pointer locked'); });
    controls.addEventListener('unlock', () => { blocker.style.display = 'flex'; console.log('Pointer unlocked'); });
    document.addEventListener('pointerlockerror', e => { console.error('Pointer Lock Error', e); instructions.textContent = 'Error acquiring pointer lock. Try again.'; });
    scene.add(controls.getObject());

    // Floor
    const floor = new THREE.Mesh(
      new THREE.PlaneGeometry(50,50),
      new THREE.MeshPhongMaterial({ color: 0x222222 })
    );
    floor.rotation.x = -Math.PI/2;
    scene.add(floor);

    // Walls
    const wallMat = new THREE.MeshPhongMaterial({ color: 0x333333 });
    [[0,5,-25,0,0],[0,5,25,0,0],[-25,5,0,0,Math.PI/2],[25,5,0,0,Math.PI/2]]
      .forEach(([x,y,z,rx,ry])=>{
        const wall = new THREE.Mesh(new THREE.BoxGeometry(50,10,1), wallMat);
        wall.position.set(x,y,z);
        wall.rotation.set(rx,ry,0);
        scene.add(wall);
      });

    // Lighting
    scene.add(new THREE.AmbientLight(0x404040));
    const pointLight = new THREE.PointLight(0xffffff,1,100);
    pointLight.position.set(0,10,0);
    scene.add(pointLight);

    // NPCs with chat bubbles
    const messages = ['Welcome to the club!', 'Enjoy the music.', 'Watch your step.', 'Bar is over there!', 'Dance floor ahead!'];
    for(let i=0;i<5;i++){
      const npc = new THREE.Mesh(new THREE.BoxGeometry(1,2,1), new THREE.MeshPhongMaterial({ color: 0xff5555 }));
      npc.position.set((Math.random()-0.5)*20,1,(Math.random()-0.5)*20);
      scene.add(npc);
      const div = document.createElement('div');
      div.className = 'chat-bubble';
      div.textContent = messages[i % messages.length];
      const label = new CSS2DObject(div);
      label.position.set(0,1.5,0);
      npc.add(label);
    }

    // Movement controls
    const move = {forward:false,backward:false,left:false,right:false};
    let velocity = new THREE.Vector3();
    document.addEventListener('keydown', e=>{
      if(e.code==='KeyW') move.forward=true;
      if(e.code==='KeyS') move.backward=true;
      if(e.code==='KeyA') move.left=true;
      if(e.code==='KeyD') move.right=true;
    });
    document.addEventListener('keyup', e=>{
      if(e.code==='KeyW') move.forward=false;
      if(e.code==='KeyS') move.backward=false;
      if(e.code==='KeyA') move.left=false;
      if(e.code==='KeyD') move.right=false;
    });

    // Animation loop
    const clock = new THREE.Clock();
    function animate(){
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      velocity.x -= velocity.x * 10 * delta;
      velocity.z -= velocity.z * 10 * delta;
      const dir = new THREE.Vector3(
        (move.right?1:0)-(move.left?1:0),
        0,
        (move.backward?1:0)-(move.forward?1:0)
      ).normalize();
      if(move.forward||move.backward) velocity.z -= dir.z * 400 * delta;
      if(move.left||move.right) velocity.x -= dir.x * 400 * delta;
      controls.moveRight(-velocity.x*delta);
      controls.moveForward(-velocity.z*delta);
      renderer.render(scene,camera);
      labelRenderer.render(scene,camera);
    }
    animate();

    // Resize
    window.addEventListener('resize', ()=>{
      camera.aspect = window.innerWidth/window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth,window.innerHeight);
      labelRenderer.setSize(window.innerWidth,window.innerHeight);
    });
  </script>
</body>
</html>
